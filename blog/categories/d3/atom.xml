<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: d3, | @statwonk]]></title>
  <link href="http://statwonk.github.io/blog/categories/d3/atom.xml" rel="self"/>
  <link href="http://statwonk.github.io/"/>
  <updated>2014-02-16T12:21:28-05:00</updated>
  <id>http://statwonk.github.io/</id>
  <author>
    <name><![CDATA[Christopher P. Peters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visualizing my bionic partner's data]]></title>
    <link href="http://statwonk.github.io/blog/2014/01/05/visualizing-diabetes-data/"/>
    <updated>2014-01-05T16:44:00-05:00</updated>
    <id>http://statwonk.github.io/blog/2014/01/05/visualizing-diabetes-data</id>
    <content type="html"><![CDATA[<p><link rel="stylesheet" type="text/css" href="../../../../../stylesheets/diabetes.css">
<link rel="stylesheet" type="text/css" href="../../../../../stylesheets/braces.css"></p>

<script type="text/javascript" src="../../../../../javascripts/crossfilter.v1.min.js"></script>


<script src="http://d3js.org/d3.v3.min.js"></script>


<p>My partner is a loving and willing lab-rat. She&rsquo;s bionic and carries an insulin
pump that automatically doses insulin for her diabetes. The pump has a few
&ldquo;levers&rdquo; one can pull and &ldquo;knobs&rdquo; that can be set.</p>

<p>This is her exact model:</p>

<p><img class="center <a" src="href="http://www.medtronicdiabetes.com/res/img/misc/revel-pump-introducing.png">http://www.medtronicdiabetes.com/res/img/misc/revel-pump-introducing.png</a>" width="400" height="400"></p>

<p>The beauty for a data scientist, like me, is that the pump records every blood
glucose measurement.  Blood glucose is basically what keeps your body fueled
with energy. The non-diabetic&rsquo;s pancreas regulates these levels, like an
automatic transmission in a car. The diabetic&rsquo;s pancreas is like a manual
transmission.  My partner takes a blood glucose reading (tachometer RPM level)
and decides to &ldquo;shift&rdquo; or not by giving herself insulin.</p>

<p>Ideally, a diabetic would like to stay in a range of 70 &ndash; 180 mg/dL of blood
glucose.  If you&rsquo;re not diabetic, you probably never stray from 70 &ndash; 140 mg/dL.</p>

<p>The interesting thing is that patterns become apparent in the diabetic.</p>

<p>For example, select levels greater than 250 in the Glucose graph below.  You can
see that many happen after 4pm, likely after lunch and/or dinner.  It makes
sense, right?</p>

<p><img class="center <a" src="href="http://i.imgur.com/S7HOtYb.png">http://i.imgur.com/S7HOtYb.png</a>"></p>

<p>If you select values less than 70, you&rsquo;ll see three spikes.</p>

<p><img class="center <a" src="href="http://i.imgur.com/4mUfiCg.png">http://i.imgur.com/4mUfiCg.png</a>"></p>

<p>These are likely do to insulin mis-calculations before eating breakfast, lunch
and a late snack. At these times, the diabetic gives themself a large quantity
of insulin to counter-act the rise in blood glucose that the food will provide.
Again, it&rsquo;s like shifting a manual transmission in traffic on hills, sometimes
you grind the gears.</p>

<p><strong>Play with the data yourself.</strong>  It&rsquo;s a kindly donated year&rsquo;s worth of a real
diabetic&rsquo;s readings.</p>

<div id="charts">
  <div id="hour-chart" class="chart">
    <div class="title">Readings by time of day (hour, 0 = midnight)</div>
  </div>
  <br>
  <div id="delay-chart" class="chart">
    <div class="title">Glucose (mg / dL)</div>
  </div>
<div id="curly-brace">
  <div id="left" class="brace"></div>
  <div id="right" class="brace"></div>
  <span style="margin-left:30px;">Ideal range</span>
</div>
</div>


<p><aside id="totals"><span id="active">&ndash;</span> of <span id="total">&ndash;</span> readings selected.</aside></p>

<div id="lists">
  <div id="flight-list" class="list"></div>
</div>




<script>
// (It's CSV, but GitHub Pages only gzip's JSON at the moment.)
d3.csv("/assets/diabetes.json", function(error, flights) {

  // Various formatters.
  var formatNumber = d3.format(",d"),
      formatChange = d3.format("+,d"),
      formatDate = d3.time.format("%B %d, %Y"),
      formatTime = d3.time.format("%I:%M %p");

  // A nest operator, for grouping the flight list.
  var nestByDate = d3.nest()
      .key(function(d) { return d3.time.day(d.time); });

  // A little coercion, since the CSV is untyped.
  flights.forEach(function(d, i) {
    d.index = i;
    d.time = parseDate(d.time);
    d.bg = +d.bg;
    d.hour = d.time.getHours();
  });

  // Create the crossfilter for the relevant dimensions and groups.
  var flight = crossfilter(flights),
      all = flight.groupAll(),
      date = flight.dimension(function(d) { return d.time; }),
      dates = date.group(d3.time.day),
      hour = flight.dimension(function(d) { return d.time.getHours() + d.time.getMinutes() / 60; }),
      hours = hour.group(Math.floor),
      delay = flight.dimension(function(d) { return d.bg; }),
      delays = delay.group(function(d) { return Math.floor(d / 10) * 10; })

  var charts = [

    barChart()
        .dimension(hour)
        .group(hours)
      .x(d3.scale.linear()
        .domain([0, 24])
        .rangeRound([0, 500])),

    barChart()
        .dimension(delay)
        .group(delays)
      .x(d3.scale.linear()
        .domain([0, 600])
        .rangeRound([0, 800]))
  ];

  // Given our array of charts, which we assume are in the same order as the
  // .chart elements in the DOM, bind the charts to the DOM and render them.
  // We also listen to the chart's brush events to update the display.
  var chart = d3.selectAll(".chart")
      .data(charts)
      .each(function(chart) { chart.on("brush", renderAll).on("brushend", renderAll); });

  // Render the initial lists.
  var list = d3.selectAll(".list")
      .data([flightList]);

  // Render the total.
  d3.selectAll("#total")
      .text(formatNumber(flight.size()));

  renderAll();

  // Renders the specified chart or list.
  function render(method) {
    d3.select(this).call(method);
  }

  // Whenever the brush moves, re-rendering everything.
  function renderAll() {
    chart.each(render);
    list.each(render);
    d3.select("#active").text(formatNumber(all.value()));
  }

  // Like d3.time.format, but faster.
  function parseDate(d) {
    return new Date(2013,
        d.substring(0, 2) - 1,
        d.substring(2, 4),
        d.substring(4, 6),
        d.substring(6, 8));
  }

  window.filter = function(filters) {
    filters.forEach(function(d, i) { charts[i].filter(d); });
    renderAll();
  };

  window.reset = function(i) {
    charts[i].filter(null);
    renderAll();
  };

  function flightList(div) {
    var flightsByDate = nestByDate.entries(date.top(1200));

    div.each(function() {
      var date = d3.select(this).selectAll(".date")
          .data(flightsByDate, function(d) { return d.key; });

      date.enter().append("div")
          .attr("class", "date")
        .append("div")
          .attr("class", "day")
          .text(function(d) { return formatDate(d.values[0].time); });

      date.exit().remove();

      var flight = date.order().selectAll(".flight")
          .data(function(d) { return d.values; }, function(d) { return d.index; });

      var flightEnter = flight.enter().append("div")
          .attr("class", "flight");
      
      flightEnter.append("div")
          .attr("class", "time")
          .text(function(d) { return formatTime(d.time); });

      flightEnter.append("div")
          .attr("class", "delay")
          .classed("inrange", function(d) { return d.bg > 69 && d.bg < 181})
          .classed("highoutofrange", function(d) { return d.bg >= 181 })
          .classed("lowoutofrange", function(d) { return d.bg < 69 })
          .text(function(d) { return d.bg + " mg/dl"; });

      flight.exit().remove();

      flight.sort(function(a, b) { return b - a; });
    });
  }

  function barChart() {
    if (!barChart.id) barChart.id = 0;

    var margin = {top: 10, right: 10, bottom: 20, left: 10},
        width = 600 - margin.left - margin.right,
        x = d3.scale.linear().range([0, width]),
        y = d3.scale.linear().range([100, 0]),
        id = barChart.id++,
        axis = d3.svg.axis().orient("bottom"),
        brush = d3.svg.brush(),
        brushDirty,
        dimension,
        group,
        round;

    function chart(div) {
      var height = y.range()[0];

      y.domain([0, group.top(1)[0].value]);

      div.each(function() {
        var div = d3.select(this),
            g = div.select("g");

        // Create the skeletal chart.
        if (g.empty()) {

          div.select(".title").append("a")
              .attr("href", "javascript:reset(" + id + ")")
              .attr("class", "reset")
              .text("reset")
              .style("display", "none");

          g = div.append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
            .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          g.append("clipPath")
              .attr("id", "clip-" + id)
            .append("rect")
              .attr("width", width)
              .attr("height", height);

          g.selectAll(".bar")
              .data(["background", "foreground"])
            .enter().append("path")
              .attr("class", function(d) { return d + " bar"; })
              .datum(group.all());

          g.selectAll(".foreground.bar")
              .attr("clip-path", "url(#clip-" + id + ")");

          g.append("g")
              .attr("class", "axis")
              .attr("transform", "translate(0," + height + ")")
              .call(axis);

          // Initialize the brush component with pretty resize handles.
          var gBrush = g.append("g").attr("class", "brush").call(brush);
          gBrush.selectAll("rect").attr("height", height);
          gBrush.selectAll(".resize").append("path").attr("d", resizePath);
        }

        // Only redraw the brush if set externally.
        if (brushDirty) {
          brushDirty = false;
          g.selectAll(".brush").call(brush);
          div.select(".title a").style("display", brush.empty() ? "none" : null);
          if (brush.empty()) {
            g.selectAll("#clip-" + id + " rect")
                .attr("x", 0)
                .attr("width", width);
          } else {
            var extent = brush.extent();
            g.selectAll("#clip-" + id + " rect")
                .attr("x", x(extent[0]))
                .attr("width", x(extent[1]) - x(extent[0]));
          }
        }

        g.selectAll(".bar").attr("d", barPath);
      });

      function barPath(groups) {
        var path = [],
            i = -1,
            n = groups.length,
            d;
        while (++i < n) {
          d = groups[i];
          path.push("M", x(d.key), ",", height, "V", y(d.value), "h9V", height);
        }
        return path.join("");
      }

      function resizePath(d) {
        var e = +(d == "e"),
            x = e ? 1 : -1,
            y = height / 3;
        return "M" + (.5 * x) + "," + y
            + "A6,6 0 0 " + e + " " + (6.5 * x) + "," + (y + 6)
            + "V" + (2 * y - 6)
            + "A6,6 0 0 " + e + " " + (.5 * x) + "," + (2 * y)
            + "Z"
            + "M" + (2.5 * x) + "," + (y + 8)
            + "V" + (2 * y - 8)
            + "M" + (4.5 * x) + "," + (y + 8)
            + "V" + (2 * y - 8);
      }
    }

    brush.on("brushstart.chart", function() {
      var div = d3.select(this.parentNode.parentNode.parentNode);
      div.select(".title a").style("display", null);
    });

    brush.on("brush.chart", function() {
      var g = d3.select(this.parentNode),
          extent = brush.extent();
      if (round) g.select(".brush")
          .call(brush.extent(extent = extent.map(round)))
        .selectAll(".resize")
          .style("display", null);
      g.select("#clip-" + id + " rect")
          .attr("x", x(extent[0]))
          .attr("width", x(extent[1]) - x(extent[0]));
      dimension.filterRange(extent);
    });

    brush.on("brushend.chart", function() {
      if (brush.empty()) {
        var div = d3.select(this.parentNode.parentNode.parentNode);
        div.select(".title a").style("display", "none");
        div.select("#clip-" + id + " rect").attr("x", null).attr("width", "100%");
        dimension.filterAll();
      }
    });

    chart.margin = function(_) {
      if (!arguments.length) return margin;
      margin = _;
      return chart;
    };

    chart.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      axis.scale(x);
      brush.x(x);
      return chart;
    };

    chart.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return chart;
    };

    chart.dimension = function(_) {
      if (!arguments.length) return dimension;
      dimension = _;
      return chart;
    };

    chart.filter = function(_) {
      if (_) {
        brush.extent(_);
        dimension.filterRange(_);
      } else {
        brush.clear();
        dimension.filterAll();
      }
      brushDirty = true;
      return chart;
    };

    chart.group = function(_) {
      if (!arguments.length) return group;
      group = _;
      return chart;
    };

    chart.round = function(_) {
      if (!arguments.length) return round;
      round = _;
      return chart;
    };

    return d3.rebind(chart, brush, "on");
  }
});
</script>

]]></content>
  </entry>
  
</feed>
