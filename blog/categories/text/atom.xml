<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: text | @statwonk]]></title>
  <link href="http://statwonk.github.io/blog/categories/text/atom.xml" rel="self"/>
  <link href="http://statwonk.github.io/"/>
  <updated>2014-02-16T13:42:56-05:00</updated>
  <id>http://statwonk.github.io/</id>
  <author>
    <name><![CDATA[Christopher P. Peters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mawk or awk? Munging large log files]]></title>
    <link href="http://statwonk.github.io/blog/2014/02/14/mawk-or-awk/"/>
    <updated>2014-02-14T09:26:00-05:00</updated>
    <id>http://statwonk.github.io/blog/2014/02/14/mawk-or-awk</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently needed to process some pretty large log files.  The files accrue about 2gb a week.  For now, it&rsquo;s possible to read the files into <code>R</code>, but very soon it won&rsquo;t be possible without a key-value store, or serving it off of a MySQL server <a href="http://brenocon.com/blog/2009/02/comparison-of-data-analysis-packages-r-matlab-scipy-excel-sas-spss-stata/#comment-5714">as Jim Porzack suggests.</a></p>

<p>Big data is relatively new to me.  I don&rsquo;t have a Hadoop cluster to work on, so going that route doesn&rsquo;t get me much miliage right now. R only runs on one cluster by default, though, so I&rsquo;ve learned efficiency techniques can make amazing things possible locally.  Julia, for example shines:</p>

<div class="figure">
<table class="benchmarks">
<colgroup>
<col class="name"></col>
<col class="relative" span="9"></col>
</colgroup>
<thead>
<tr><td></td><th class="system">Fortran</th><th class="system">Julia</th><th class="system">Python</th><th class="system">R</th><th class="system">Matlab</th><th class="system">Octave</th><th class="system">Mathe-matica</th><th class="system">JavaScript</th><th class="system">Go</th></tr>
<tr><td></td><td class="version">gcc 4.8.1
</td><td class="version">0.2</td><td class="version">2.7.3
</td><td class="version">3.0.2
</td><td class="version">R2012a
</td><td class="version">3.6.4
</td><td class="version">8.0
</td><td class="version">V8 3.7.12.22
</td><td class="version">go1
</td></tr>
</thead>
<tbody>
<tr><th>fib</th><td class="data">0.26</td><td class="data">0.91</td><td class="data">30.37</td><td class="data">411.36</td><td class="data">1992.00</td><td class="data">3211.81</td><td class="data">64.46</td><td class="data">2.18</td><td class="data">1.03</td></tr>
<tr><th>parse_int</th><td class="data">5.03</td><td class="data">1.60</td><td class="data">13.95</td><td class="data">59.40</td><td class="data">1463.16</td><td class="data">7109.85</td><td class="data">29.54</td><td class="data">2.43</td><td class="data">4.79</td></tr>
<tr><th>quicksort</th><td class="data">1.11</td><td class="data">1.14</td><td class="data">31.98</td><td class="data">524.29</td><td class="data">101.84</td><td class="data">1132.04</td><td class="data">35.74</td><td class="data">3.51</td><td class="data">1.25</td></tr>
<tr><th>mandel</th><td class="data">0.86</td><td class="data">0.85</td><td class="data">14.19</td><td class="data">106.97</td><td class="data">64.58</td><td class="data">316.95</td><td class="data">6.07</td><td class="data">3.49</td><td class="data">2.36</td></tr>
<tr><th>pi_sum</th><td class="data">0.80</td><td class="data">1.00</td><td class="data">16.33</td><td class="data">15.42</td><td class="data">1.29</td><td class="data">237.41</td><td class="data">1.32</td><td class="data">0.84</td><td class="data">1.41</td></tr>
<tr><th>rand_mat_stat</th><td class="data">0.64</td><td class="data">1.66</td><td class="data">13.52</td><td class="data">10.84</td><td class="data">6.61</td><td class="data">14.98</td><td class="data">4.52</td><td class="data">3.28</td><td class="data">8.12</td></tr>
<tr><th>rand_mat_mul</th><td class="data">0.96</td><td class="data">1.01</td><td class="data">3.41</td><td class="data">3.98</td><td class="data">1.10</td><td class="data">3.41</td><td class="data">1.16</td><td class="data">14.60</td><td class="data">8.51</td></tr>
</tbody>
</table>

<p class="caption"><b>Figure:</b>
benchmark times relative to C (smaller is better, C performance = 1.0).
</p>
<p class="note">
Source and all work attributable to: [http://julialang.org](http://julialang.org); C compiled by gcc 4.8.1, taking best timing from all optimization levels (-O0 through -O3).
C, Fortran and Julia use <a href="https://github.com/xianyi/OpenBLAS">OpenBLAS</a> v0.2.8.
The Python implementations of <tt>rand_mat_stat</tt> and <tt>rand_mat_mul</tt> use NumPy (v1.6.1) functions; the rest are pure Python implementations.<br/>
Benchmarks can also be seen <a href="http://julialang.org/benchmarks/">here as a plot</a> created with <a href="https://github.com/dcjones/Gadfly.jl">Gadfly</a>.
</p>
</div>


<p>However not shown on that table is <code>awk</code> or it&rsquo;s cousin <code>mawk</code>.  Since I&rsquo;m working with a log file that&rsquo;s mostly text, I want quick and easy ability to apply regular expressions.  The file is not fully structured, so it will need to be parsed.</p>

<p>I&rsquo;ve recently been exploring Unix tools.  I moved from Windows to Unix about a year ago and haven&rsquo;t looked back.</p>

<p>Last weekend I spent about three hours or so learning <code>awk</code> with this <a href="http://cm.bell-labs.com/cm/cs/awkbook/">gem of a book.</a></p>

<p>I knew that the program was great at text processing, but I wasn&rsquo;t sure if there was something better.</p>

<p>The response in this StackOverflow post pushed me over the edge:</p>

<p><blockquote><p>If you quickly learn the basics of awk, you can indeed do amazing things on the command line.</p></p><p><p>But the real reason to learn awk is to have an excuse to read the superb book The AWK Programming Language by its authors Aho, Kernighan, and Weinberger. You would think, from the name, that it simply teaches you awk. Actually, that is just the beginning. Launching into the vast array of problems that can be tackled once one is using a concise scripting language that makes string manipulation easy — and awk was one of the first — it proceeds to teach the reader how to implement a database, a parser, an interpreter, and (if memory serves me) a compiler for a small project-specific computer language! If only they had also programmed an example operating system using awk, the book would have been a fairly complete survey introduction to computer science!</p></p><p><p>Famously clear and concise, like the original C Language book, it also is a wonderful example of friendly technical writing done right. Even the index is a piece of craftsmanship.</p></p><p><p>Awk? If you know it, you&rsquo;ll use it at the command-line occasionally, but for anything larger you&rsquo;ll feel trapped, unable to access the wider features of your system and the Internet that something like Python provides access to. But the book? You&rsquo;ll always be glad you read it!</p></blockquote></p>

<p>So I read the book.  The authors are right, the book is very clear and can allow you to do some pretty neat things with the language in an hour or so.</p>

<p>As an aside, I&rsquo;m also very interested in <a href="http://en.wikipedia.org/wiki/Sed"><code>sed</code></a>.  It&rsquo;s a stream editor, which means that it applies rules to lines of data one at a time and can allow for the processing of HUGE files without actually opening them.</p>

<p>After playing around with awk a bit, I came across <a href="http://brenocon.com/blog/2009/09/dont-mawk-awk-the-fastest-and-most-elegant-big-data-munging-language/">this confusing blog title</a>. The post compares mawk and awk in terms of speed.  <strong>mawk is way faster and can apparently beat C++ and Java-speed!</strong>  The post also talks about potential problems with mawk historically, but it appears that those have been fixed.  Also, I definitely plan to check operations with awk.</p>

<p>See my simple speed comparisons below simply counting 5.2 million records:</p>

<p><img class="center <a" src="href="http://i.imgur.com/BUeJ2LM.png">http://i.imgur.com/BUeJ2LM.png</a>"></p>

<p>mawk is about double the speed of awk!</p>

<p>Finally, the post mentions something exciting.  It imagines an awk on <a href="http://en.wikipedia.org/wiki/LLVM">LLVM</a>. Since the post is a couple years old, I did a little search and found what appears to be <a href="http://lawk.sourceforge.net/">an implementation!</a></p>
]]></content>
  </entry>
  
</feed>
