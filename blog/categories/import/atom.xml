<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: import | @statwonk]]></title>
  <link href="http://statwonk.github.io/blog/categories/import/atom.xml" rel="self"/>
  <link href="http://statwonk.github.io/"/>
  <updated>2014-02-16T13:42:48-05:00</updated>
  <id>http://statwonk.github.io/</id>
  <author>
    <name><![CDATA[Christopher P. Peters]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA['Reading CSV data into R']]></title>
    <link href="http://statwonk.github.io/blog/2013/09/27/reading-csv-data-into-r/"/>
    <updated>2013-09-27T12:27:00-04:00</updated>
    <id>http://statwonk.github.io/blog/2013/09/27/reading-csv-data-into-r</id>
    <content type="html"><![CDATA[<p>There are a variety of ways to import data into R.</p>

<p>I most often work with CSV files.  In my experience, getting the file path
correct is the trickiest part of bringing data into R.  I&rsquo;m going to show you how
this works by first writing a piece of data to a CSV file and then we&rsquo;ll bring it back
in.</p>

<p>The <code>data()</code> function in R allows access to tons of toy datasets.  R programmers
typically use these to <a href="http://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example">create reproducible examples</a> on sites like StackOverflow.</p>

<p>{% codeblock lang:r %}
data(mtcars) # first I get some toy data, so now we have access to the mtcars data.frame</p>

<p>head(mtcars) # Let&rsquo;s take a look</p>

<pre><code>              mpg cyl disp  hp drat    wt  qsec vs am gear carb
</code></pre>

<p>Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1 4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1 4    4
Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1 4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0 3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0 3    2
Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0 3    1</p>

<p>str(mtcars) # we can see how each variable is coded here: num, chr, list, int, etc.</p>

<p>&lsquo;data.frame&rsquo;:32 obs. of  11 variables:
  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 &hellip;
  $ cyl : num  6 6 4 6 8 6 8 4 4 6 &hellip;
  $ disp: num  160 160 108 258 360 &hellip;
  $ hp  : num  110 110 93 110 175 105 245 62 95 123 &hellip;
  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 &hellip;
  $ wt  : num  2.62 2.88 2.32 3.21 3.44 &hellip;
  $ qsec: num  16.5 17 18.6 19.4 17 &hellip;
  $ vs  : num  0 0 1 1 0 1 0 1 1 1 &hellip;
  $ am  : num  1 1 1 0 0 0 0 0 0 0 &hellip;
  $ gear: num  4 4 4 3 3 3 3 4 4 4 &hellip;
  $ carb: num  4 4 1 1 2 1 4 2 2 4 &hellip;
{% endcodeblock %}</p>

<p>So we have a <code>data.frame</code> with 32 observations and 11 variables.  Now let&rsquo;s
use <code>write.csv()</code>. First we&rsquo;ll take a look at the inputs for the function. We
can do this by putting a <code>?</code> in front of our empty function and running it with
<code>R</code>.</p>

<p>{% codeblock lang:r %}
?write.csv # put a ? in front of any function to see its help page.
{% endcodeblock %}</p>

<p>We&rsquo;re brought to <a href="http://stat.ethz.ch/R-manual/R-devel/library/utils/html/write.table.html">this page</a> which shows all the options we can use.  For now, we&rsquo;re only going to use the first two arguments (or parameters, which ever you prefer): <code>x</code>, some object and <code>file= ""</code>.</p>

<p>If you use Linux, Mac, or Unix:
{% codeblock lang:r %}
write.csv(mtcars, file = &ldquo;~/mtcars.csv&rdquo;) # &lt;&mdash; that file path would tell a Unix
system to save the CSV in the home directory.
{% endcodeblock %}</p>

<p>If you use Windows (Windows is not the OS you want to be programming R in, but
it&rsquo;s okay to start on):
{% codeblock lang:r %}
write.csv(mtcars, file = &ldquo;C:/Users/Chris/Documents/mtcars.csv&rdquo;)
{% endcodeblock %}</p>

<p>Notice the direction of the backslashes in the Windows path?  It&rsquo;s the opposite
of how Windows does it.  The <code>\</code> character is considered special in R.  You can
simply convert all the <code>\</code> backslashes that Windows shows you in a filepath to
<code>/</code> forward slashes.  If you wanted to get fancy, you could actually put two
backslashes, like this instead of single forward slashes <code>C:\\temp\\some-file.csv</code>.</p>

<p>Both of these would work, <code>C:\\temp\\some-file.csv</code> and <code>C:/temp/some-file.csv</code>,
while <code>C:\temp\some-file.csv</code> will not.</p>

<p>Now that we know the exact path of the file, let&rsquo;s read it back in to R.</p>

<p>{% codeblock lang:r %}
my_data_frame &lt;&ndash; read.csv(&ldquo;~/mtcars.csv&rdquo;)
{% endcodeblock %}</p>

<p>or for Windows:</p>

<p>{% codeblock lang:r %}
my_data_frame &lt;&ndash; read.csv(&ldquo;C:/Users/Chris/Documents/mtcars.csv&rdquo;)
{% endcodeblock %}</p>

<p>I&rsquo;d encourage you to read <a href="http://stat.ethz.ch/R-manual/R-devel/library/utils/html/read.table.html">the documentation</a> on the <code>read.csv()</code>.</p>

<p>You&rsquo;ll notice that when we take a look at the imported data the variables are
coded differently.  This is because <code>read.csv()</code> looks at your data and makes a
guess about which type they should be: <code>character</code>, <code>numeric</code>, <code>int</code>, <code>factor</code>,
etc.  Commonly you&rsquo;ll want to control this with options like <code>stringsAsFactors =
FALSE</code>.</p>

<p>{% codeblock lang:r %}
&lsquo;data.frame&rsquo;:32 obs. of  12 variables:
   $ X   : Factor w/ 32 levels &ldquo;AMC Javelin&rdquo;,..: 18 19 5 13 14 31 7 21 20 22 &hellip;
   $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 &hellip;
   $ cyl : int  6 6 4 6 8 6 8 4 4 6 &hellip;
   $ disp: num  160 160 108 258 360 &hellip;
   $ hp  : int  110 110 93 110 175 105 245 62 95 123 &hellip;
   $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 &hellip;
   $ wt  : num  2.62 2.88 2.32 3.21 3.44 &hellip;
   $ qsec: num  16.5 17 18.6 19.4 17 &hellip;
   $ vs  : int  0 0 1 1 0 1 0 1 1 1 &hellip;
   $ am  : int  1 1 1 0 0 0 0 0 0 0 &hellip;
   $ gear: int  4 4 4 3 3 3 3 4 4 4 &hellip;
   $ carb: int  4 4 1 1 2 1 4 2 2 4 &hellip;
{% endcodeblock %}</p>

<p>That&rsquo;s all for now.  Next time we&rsquo;ll do some basic visualization of this
dataset.</p>
]]></content>
  </entry>
  
</feed>
